const express = require('express');
const router = express.Router();
const Transaction = require('../schema/transactionSchema');
const Booking = require('../schema/bookingSchema');
const { sendBookingConfirmation, sendBookingFailed } = require('../utils/sendEmail');

// H√†m map tr·∫°ng th√°i t·ª´ PayOS sang tr·∫°ng th√°i n·ªôi b·ªô
function mapPayOSStatus(payosCode, payosStatus) {
  if (payosCode === '00' && (payosStatus === 'SUCCESS' || payosStatus === 'PAID')) {
    return 'paid';
  }
  if (payosStatus === 'FAILED') {
    return 'failed';
  }
  if (payosStatus === 'CANCELLED') {
    return 'cancelled';
  }
  return 'pending'; // fallback
}

router.post('/receive-webhook', express.json(), async (req, res) => {
  try {
    console.log('üîç Headers:', req.headers);
    console.log("üì¶ Payload:", req.body);

    const payload = req.body?.data;
    const orderCode = payload?.orderCode;
    const payosCode = payload?.code;
    const payosStatus = payload?.status;
    const amount = payload?.amount;
    const message = payload?.desc || 'Kh√¥ng c√≥ m√¥ t·∫£ l·ªói';

    // Ki·ªÉm tra orderCode
    if (!orderCode) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ orderCode trong payload:", payload);
      return res.status(200).send("Webhook test: kh√¥ng c√≥ orderCode");
    }

    // L·∫•y booking t·ª´ DB
    let booking = await Booking.findOne({ order_code: orderCode }).populate('tour_id');
    if (!booking) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y booking v·ªõi orderCode:", orderCode);
      return res.status(404).send('Booking kh√¥ng t·ªìn t·∫°i');
    }

    // Map tr·∫°ng th√°i thanh to√°n
    const payment_status = mapPayOSStatus(payosCode, payosStatus);
    console.log(`üìå K·∫øt qu·∫£ thanh to√°n t·ª´ PayOS: code=${payosCode}, status=${payosStatus} => ${payment_status}`);

    // T√¨m transaction c≈©
    let transaction = await Transaction.findOne({ booking_id: booking._id });

    if (transaction) {
      // Update transaction c≈©
      transaction.status = payment_status;
      transaction.amount = amount;
      transaction.note = message;
      transaction.payment_date = new Date();
      await transaction.save();
      console.log("‚ôªÔ∏è ƒê√£ c·∫≠p nh·∫≠t transaction c≈©");
    } else {
      // T·∫°o transaction m·ªõi
      transaction = new Transaction({
        booking_id: booking._id,
        amount,
        payment_method: "payos",
        status: payment_status,
        note: message
      });
      await transaction.save();
      console.log("‚úÖ ƒê√£ t·∫°o transaction m·ªõi");
    }

    // C·∫≠p nh·∫≠t booking
    booking.status = payment_status;
    await booking.save();
    console.log("‚úÖ L∆∞u giao d·ªãch & c·∫≠p nh·∫≠t booking th√†nh c√¥ng");

    // G·ª≠i email
    try {
      if (payment_status === 'paid' && booking.email) {
        await sendBookingConfirmation(booking.email, booking, true);
        console.log(`üìß Email X√ÅC NH·∫¨N thanh to√°n g·ª≠i t·ªõi ${booking.email}`);
      } else if (['failed', 'cancelled'].includes(payment_status) && booking.email) {
        await sendBookingFailed(booking.email, booking);
        console.log(`üìß Email TH·∫§T B·∫†I g·ª≠i t·ªõi ${booking.email}`);
      }
    } catch (emailErr) {
      console.error("‚ùå L·ªói g·ª≠i email:", emailErr.message);
    }

    res.status(200).send('OK');
  } catch (err) {
    console.error("‚ùå L·ªói webhook:", err);
    res.status(500).send('L·ªói server');
  }
});

module.exports = router;
