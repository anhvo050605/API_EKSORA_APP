const express = require('express');
const router = express.Router();
const Transaction = require('../schema/transactionSchema');
const Booking = require('../schema/bookingSchema');
const { sendBookingConfirmation, sendBookingFailed } = require('../utils/sendEmail');

router.post('/receive-webhook', express.json(), async (req, res) => {
  try {
    console.log('üîç Headers:', req.headers);
    console.log('üì¶ Raw Body:', req.body);
    console.log("‚úÖ ƒê√É NH·∫¨N WEBHOOK:", req.body);

    const payload = req.body;

    const orderCode = payload?.data?.orderCode;
    const payosCode = payload?.data?.code; // '00' ho·∫∑c l·ªói kh√°c
    const payosStatus = payload?.data?.status; // 'SUCCESS', 'FAILED', 'CANCELLED'
    const amount = payload?.data?.amount;
    const message = payload?.data?.desc || 'Kh√¥ng c√≥ m√¥ t·∫£ l·ªói'; // L√Ω do th·∫•t b·∫°i ho·∫∑c m√¥ t·∫£

    // Ki·ªÉm tra orderCode
    if (!orderCode) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ orderCode trong payload:", payload);
      return res.status(200).send("Webhook test: kh√¥ng c√≥ orderCode");
    }

    // L·∫•y booking t·ª´ DB
    let booking = await Booking.findOne({ order_code: orderCode }).populate('tour_id');
    if (!booking) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y booking v·ªõi orderCode:", orderCode);
      return res.status(404).send('Booking kh√¥ng t·ªìn t·∫°i');
    }

    // X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n
    let payment_status;
    if (payosCode === '00' && payosStatus === 'SUCCESS') {
      payment_status = 'paid';
    } else {
      payment_status = 'CANCELLED';
    }

    console.log(`üìå K·∫øt qu·∫£ thanh to√°n t·ª´ PayOS: code=${payosCode}, status=${payosStatus} => ${payment_status}`);

    // L∆∞u transaction
    const transaction = new Transaction({
      booking_id: booking._id,
      amount,
      payment_method: "PayOS",
      status: payment_status,
      note: message
    });
    await transaction.save();

    // C·∫≠p nh·∫≠t booking
    booking.status = payment_status;
    await booking.save();

    console.log("‚úÖ L∆∞u giao d·ªãch & c·∫≠p nh·∫≠t booking th√†nh c√¥ng");

    // G·ª≠i email
    try {
      if (payment_status === 'paid' && booking.email) {
        await sendBookingConfirmation(booking.email, booking, true);
        console.log(`üìß Email X√ÅC NH·∫¨N thanh to√°n g·ª≠i t·ªõi ${booking.email}`);
      } else if (payment_status === 'failed' && booking.email) {
        await sendBookingFailed(booking.email, booking);
        console.log(`üìß Email TH·∫§T B·∫†I g·ª≠i t·ªõi ${booking.email}`);
      }
    } catch (emailErr) {
      console.error("‚ùå L·ªói g·ª≠i email:", emailErr.message);
    }

    res.status(200).send('OK');
  } catch (err) {
    console.error("‚ùå L·ªói webhook:", err);
    res.status(500).send('L·ªói server');
  }
});

module.exports = router;
