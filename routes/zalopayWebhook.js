const express = require('express');
const crypto = require('crypto');
const router = express.Router();
const Transaction = require('../schema/transactionSchema');
const Booking = require('../schema/bookingSchema');
const { sendBookingConfirmation, sendBookingFailed } = require('../utils/sendEmail');

router.post('/zalopay-webhook', express.json(), async (req, res) => {
    try {
        console.log('üîç Headers:', req.headers);
        console.log('üì¶ Raw Body:', req.body);

        const { data, mac } = req.body;

        if (!data || !mac) {
            return res.json({ return_code: -1, return_message: "Thi·∫øu data ho·∫∑c mac" });
        }

        // ‚úÖ Verify MAC
        const key1 = process.env.ZALO_KEY1; // l·∫•y trong dashboard ZaloPay
        const genMac = crypto.createHmac('sha256', key1).update(data).digest('hex');

        if (mac !== genMac) {
            console.warn("‚ùå Sai MAC, kh√¥ng tin c·∫≠y!");
            return res.json({ return_code: -1, return_message: "mac not equal" });
        }

        // ‚úÖ Parse JSON trong field data
        const dataJson = JSON.parse(data);
        console.log("üì© Callback t·ª´ ZaloPay:", dataJson);

        const appTransId = dataJson.app_trans_id;
        const amount = dataJson.amount;
        const status = dataJson.status; // 1 = th√†nh c√¥ng, 0 = th·∫•t b·∫°i

        // Booking ID: gi·∫£ s·ª≠ b·∫°n encode v√†o app_trans_id d·∫°ng "bookingId_timestamp"
        const bookingId = appTransId.split("_")[1];

        let booking = await Booking.findById(bookingId).populate('tour_id');
        if (!booking) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y booking:", bookingId);
            return res.json({ return_code: 1, return_message: "Booking not found" });
        }

        // ‚úÖ X√°c ƒë·ªãnh tr·∫°ng th√°i
        // ‚úÖ X√°c ƒë·ªãnh tr·∫°ng th√°i t·ª´ callback ZaloPay
        let payment_status;
        if (status === 1) {
            payment_status = "paid";        // Th√†nh c√¥ng
        } else if (status === -1) {
            payment_status = "failed";      // Th·∫•t b·∫°i
        } else {
            payment_status = "pending";     // ƒêang x·ª≠ l√Ω
        }

        // ‚úÖ L∆∞u transaction
        const transaction = new Transaction({
            booking_id: booking._id,
            amount,
            payment_method: "ZaloPay",
            status: payment_status,
            note: payment_status === "paid"
                ? "Thanh to√°n th√†nh c√¥ng"
                : payment_status === "failed"
                    ? "Thanh to√°n th·∫•t b·∫°i"
                    : "ƒêang x·ª≠ l√Ω"
        });
        await transaction.save();

        // ‚úÖ Update booking
        booking.status = payment_status;
        await booking.save();


        console.log("‚úÖ L∆∞u giao d·ªãch & c·∫≠p nh·∫≠t booking th√†nh c√¥ng");

        // G·ª≠i email
        try {
            if (payment_status === 'paid' && booking.email) {
                await sendBookingConfirmation(booking.email, booking, true);
                console.log(`üìß Email X√ÅC NH·∫¨N g·ª≠i t·ªõi ${booking.email}`);
            } else if (payment_status === 'failed' && booking.email) {
                await sendBookingFailed(booking.email, booking);
                console.log(`üìß Email TH·∫§T B·∫†I g·ª≠i t·ªõi ${booking.email}`);
            }
        } catch (emailErr) {
            console.error("‚ùå L·ªói g·ª≠i email:", emailErr.message);
        }

        // ‚úÖ B·∫Øt bu·ªôc ph·∫£i tr·∫£ v·ªÅ cho ZaloPay
        res.json({ return_code: 1, return_message: "success" });

    } catch (err) {
        console.error("‚ùå L·ªói webhook ZaloPay:", err);
        res.json({ return_code: 0, return_message: "server error" });
    }
});

module.exports = router;
