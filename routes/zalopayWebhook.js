const express = require('express');
const crypto = require('crypto');
const router = express.Router();
const Transaction = require('../schema/transactionSchema');
const Booking = require('../schema/bookingSchema');
const { sendBookingConfirmation, sendBookingFailed } = require('../utils/sendEmail');

router.post('/zalopay-webhook', express.json(), async (req, res) => {
    try {
        console.log('================= üì© [WEBHOOK ZALOPAY] =================');
        console.log('üîç Headers:', JSON.stringify(req.headers, null, 2));
        console.log('üì¶ Raw Body:', JSON.stringify(req.body, null, 2));

        const { data, mac } = req.body;

        if (!data || !mac) {
            console.error("‚ùå Thi·∫øu data ho·∫∑c mac trong webhook body");
            return res.json({ return_code: -1, return_message: "Thi·∫øu data ho·∫∑c mac" });
        }

        // ‚úÖ Verify MAC
        // const key1 = process.env.ZALO_KEY1;
        // const genMac = crypto.createHmac('sha256', key1).update(data).digest('hex');
        const key2 = process.env.ZALO_KEY2;
        const genMac = crypto.createHmac('sha256', key2).update(data).digest('hex');
        console.log("üîë MAC sinh ra:", genMac);
        console.log("üîë MAC t·ª´ ZaloPay:", mac);

        if (mac !== genMac) {
            console.warn("‚ùå Sai MAC, kh√¥ng tin c·∫≠y!");
            return res.json({ return_code: -1, return_message: "mac not equal" });
        }

        // ‚úÖ Parse JSON trong field data
        // ‚úÖ Parse JSON trong field data
        const dataJson = JSON.parse(data);
        console.log("üì© Callback t·ª´ ZaloPay:", JSON.stringify(dataJson, null, 2));

        const amount = dataJson.amount;
        const status = dataJson.status;

        // ‚úÖ bookingId ph·∫£i l·∫•y t·ª´ embed_data
        const { booking_id } = JSON.parse(dataJson.embed_data);
        console.log("üîë bookingId l·∫•y t·ª´ embed_data:", booking_id);

        let booking = await Booking.findById(booking_id).populate('tour_id');
        if (!booking) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y booking:", booking_id);
            return res.json({ return_code: 1, return_message: "Booking not found" });
        }

        console.log("üìö Booking t√¨m th·∫•y:", booking);

        // ‚úÖ X√°c ƒë·ªãnh tr·∫°ng th√°i t·ª´ callback ZaloPay
        let payment_status;
        if (status === 1) {
            payment_status = "paid";
        } else if (status === -1 || status === 0) {
            payment_status = "failed";
        } else {
            payment_status = "pending";
        }
        console.log("‚úÖ Mapping status ->", payment_status);

        // ‚úÖ L∆∞u transaction (tr√°nh tr√πng n·∫øu callback b·∫Øn nhi·ªÅu l·∫ßn)
        let transaction = await Transaction.findOne({ booking_id: booking._id });
        if (!transaction) {
            console.log("‚ûï T·∫°o m·ªõi transaction");
            transaction = new Transaction({
                booking_id: booking._id,
                amount,
                payment_method: "ZaloPay",
                status: payment_status,
                note: payment_status === "paid"
                    ? "Thanh to√°n th√†nh c√¥ng"
                    : payment_status === "failed"
                        ? "Thanh to√°n th·∫•t b·∫°i"
                        : "ƒêang x·ª≠ l√Ω"
            });
        } else {
            console.log("‚ôªÔ∏è Update transaction c≈©:", transaction._id);
            transaction.status = payment_status;
            transaction.note = payment_status;
        }
        await transaction.save();
        console.log("üíæ Transaction l∆∞u th√†nh c√¥ng:", transaction);

        booking.status = payment_status;
        booking.transaction_id = transaction._id;
        booking.last_update = Date.now();
        await booking.save();
        await booking.save();
        console.log("üíæ Booking c·∫≠p nh·∫≠t th√†nh c√¥ng:", booking);

        // G·ª≠i email
        try {
            if (payment_status === 'paid' && booking.email) {
                await sendBookingConfirmation(booking.email, booking, true);
                console.log(`üìß Email X√ÅC NH·∫¨N g·ª≠i t·ªõi ${booking.email}`);
            } else if (payment_status === 'failed' && booking.email) {
                await sendBookingFailed(booking.email, booking);
                console.log(`üìß Email TH·∫§T B·∫†I g·ª≠i t·ªõi ${booking.email}`);
            }
        } catch (emailErr) {
            console.error("‚ùå L·ªói g·ª≠i email:", emailErr.message);
        }

        console.log("================= ‚úÖ [K·∫æT TH√öC WEBHOOK] =================");
        // ‚úÖ Ph·∫£n h·ªìi ZaloPay
        res.json({ return_code: 1, return_message: "success" });

    } catch (err) {
        console.error("‚ùå L·ªói webhook ZaloPay:", err);
        res.json({ return_code: 0, return_message: "server error" });
    }
});

module.exports = router;
