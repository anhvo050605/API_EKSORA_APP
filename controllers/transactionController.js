const Transaction = require('../schema/transactionSchema');
const Booking = require('../schema/bookingSchema');

// ‚úÖ H√†m x·ª≠ l√Ω webhook t·ª´ PayOS
exports.handlePayOSWebhook = async (req, res) => {
  try {
    const { orderCode, amount, status } = req.body;

    console.log('üì• Nh·∫≠n webhook PayOS:', req.body);

    // T√¨m booking theo orderCode
    const booking = await Booking.findOne({ orderCode });
    if (!booking) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y booking t∆∞∆°ng ·ª©ng' });
    }

    if (status === 'PAID') {
      // 1Ô∏è‚É£ T·∫°o transaction
      const newTransaction = await Transaction.create({
        booking_id: booking._id,
        amount: amount,
        payment_method: 'PayOS',
        status: 'success'
      });

      // 2Ô∏è‚É£ G√°n transaction_id cho booking v√† c·∫≠p nh·∫≠t status
      await Booking.findByIdAndUpdate(booking._id, {
        transaction_id: newTransaction._id,
        status: 'ƒê√£ thanh to√°n'
      });

      return res.status(200).json({ message: 'C·∫≠p nh·∫≠t giao d·ªãch v√† booking th√†nh c√¥ng' });
    }

    res.status(200).json({ message: 'Webhook nh·∫≠n nh∆∞ng ch∆∞a x·ª≠ l√Ω v√¨ tr·∫°ng th√°i kh√¥ng ph·∫£i PAID' });
  } catch (err) {
    console.error('‚ùå Webhook PayOS l·ªói:', err);
    res.status(500).json({ message: 'L·ªói server x·ª≠ l√Ω webhook' });
  }
};
