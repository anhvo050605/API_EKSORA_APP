const Booking = require('../schema/bookingSchema');
const Transaction = require('../schema/transactionSchema'); // n·∫øu c√≥
const PayOS = require('@payos/node');

const payos = new PayOS(
  process.env.PAYOS_CLIENT_ID,
  process.env.PAYOS_API_KEY,
  process.env.PAYOS_CHECKSUM_KEY
);

// üëá ƒê√¢y l√† controller g·ªçi khi user nh·∫•n "ƒê·∫∑t tour & Thanh to√°n"
exports.createPaymentAndBooking = async (req, res) => {
  try {
    const {
      user_id,
      tour_id,
      travel_date,
      quantity_nguoiLon,
      quantity_treEm,
      totalPrice,
      // C√°c field kh√°c n·∫øu c√≥
    } = req.body;

    // 1Ô∏è‚É£ T·∫°o booking tr∆∞·ªõc
    const booking = await Booking.create({
      user_id,
      tour_id,
      travel_date,
      quantity_nguoiLon,
      quantity_treEm,
      totalPrice,
    });

    // 2Ô∏è‚É£ T·∫°o m√£ orderCode duy nh·∫•t cho PayOS
    const orderCode = `booking-${booking._id}-${Date.now()}`;

    // 3Ô∏è‚É£ L∆∞u orderCode v√†o booking (ƒë·ªÉ khi webhook ƒë·∫øn th√¨ t√¨m ra ƒë∆∞·ª£c)
    await Booking.findByIdAndUpdate(booking._id, { orderCode });

    // 4Ô∏è‚É£ T·∫°o link thanh to√°n t·ª´ PayOS
    const paymentLink = await payos.createPaymentLink({
      amount: totalPrice,
      description: 'Thanh to√°n ƒë∆°n h√†ng Du l·ªãch',
      orderCode, // üß† s·∫Ω d√πng l·∫°i trong webhook
      returnUrl: 'myapp://payment-success', // RN x·ª≠ l√Ω deep link
      cancelUrl: 'myapp://payment-cancel'
    });

    // 5Ô∏è‚É£ Tr·∫£ link thanh to√°n v·ªÅ client ƒë·ªÉ m·ªü tr√¨nh duy·ªát / webview
    return res.json({
      checkoutUrl: paymentLink.checkoutUrl,
      bookingId: booking._id
    });

  } catch (err) {
    console.error('‚ùå L·ªói t·∫°o booking v√† thanh to√°n:', err);
    res.status(500).json({ message: 'T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i' });
  }
};
